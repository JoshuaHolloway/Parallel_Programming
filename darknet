How I installed DarkNet with CUDA 8.0, cuDNN 5.1, and OpenCV 3.4.1 on Ubuntu 16.04 

Note: Did not install Python bindings for OpenCV

Note: After testing cuDNN with tensorflow as described at the end I realized that this install didn't work.
The problem is with either cuDNN or CUDA.
Come back to this after monday Jan 14th

# Install of opencv:

sudo apt-get update
sudo apt-get upgrade

sudo apt-get install build-essential cmake pkg-config
sudo apt-get install libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev
sudo apt-get install libavcodec-dev 
sudo apt-get install libavformat-dev
sudo apt-get install libv4l-dev
sudo apt-get install libswscale-dev

sudo apt-get install libxvidcore-dev libx264-dev
sudo apt-get install libgtk-3-dev
sudo apt-get install libatlas-base-dev gfortran
sudo apt-get install python2.7-dev python3.5-dev
cd ~
wget -O opencv.zip https://github.com/Itseez/opencv/archive/3.4.1.zip
unzip opencv.zip
wget -O opencv_contrib.zip https://github.com/Itseez/opencv_contrib/archive/3.4.1.zip
unzip opencv_contrib.zip

pip install numpy
cd ~/opencv-3.4.1/
mkdir build
cd build

# SEE BOTTOM FOR BUILD WITH DEBUGGING SYMBOLS!!!
cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_PYTHON_EXAMPLES=ON \
    -D INSTALL_C_EXAMPLES=OFF \
    -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.4.1/modules \
    -D PYTHON_EXECUTABLE=/usr/bin/python3.5 \
    -D BUILD_EXAMPLES=ON ..

make -j6
sudo make install
sudo ldconfig

===========================================

# Install of CUDA 8.0 and cuDNN 5.1:
Described here: https://www.youtube.com/watch?v=rILtTjrecQc

# Step 1: ensure system is updated and has basic build tools
sudo apt-get update
sudo apt-get --assume-yes upgrade
sudo apt-get --assume-yes install tmux build-essential gcc g++ make binutils
sudo apt-get --assume-yes install software-properties-common


# Step 2: Install your nvidia graphics driver. Search for additional drivers in menu and open it. wait for minute and select nvidia driver and hit apply and restart.
# Open "start" menu and search for "Additional Drivers"
# Additional Drivers -> Using NVIDIA binary driver -> Apply Changes -> Restart

# Step 3: Download cuda-8.0 .deb package and install it
Get the file from here: https://developer.nvidia.com/cuda-toolkit-archive
# Download this file: cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb
$ sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb
$ sudo apt-get update
$ sudo apt-get install cuda
$ export PATH=/usr/local/cuda-8.0/bin${PATH:+:${PATH}}
$ export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

# Step 4: cuDNN:
Get the 5.1 file from here:
https://developer.nvidia.com/rdp/cudnn-archive

Download cuDNN v5.1 (Jan 20, 2017), for CUDA 8.0 ->  cuDNN v5.1 Library for Linux  ->  log-in  ->  cudnn-8.0-linux-x64-v5.1.tgz will download

$ tar -xzvf cudnn-8.0-linux-x64-v5.1.tgz
$ sudo cp cuda/include/cudnn.h /usr/local/cuda/include
$ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
$ sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*
============================================
# Install Darknet:
Follow PJ-reddie's instructions to install with CUDA and OpenCV
Set these in the makefile:
GPU=1
CUDNN=0
OPENCV=0

# Installing tensorflow and then testing cuDNN and CUDA with it
# Install anaconda and tensorflow
$ wget http://repo.continuum.io/archive/Anaconda3-5.0.1-Linux-x86_64.sh
$ chmod +x Anaconda3-5.0.1-Linux-x86_64.sh 
$ ./Anaconda3-5.0.1-Linux-x86_64.sh
$ source ~/.bashrc
$ pip install tensorflow-gpu==1.2

# Download models and get in that directory:
$ git clone https://github.com/tensorflow/models.git
$ python models-master/tutorials/image/imagenet/classify_image.py


# test that shit:
$ python models-master/tutorials/image/imagenet/classify_image.py

