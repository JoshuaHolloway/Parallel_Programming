Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.156 Build 20171018

Compiler options: /c /Qm64 /Zi /nologo /W3 /O2 /D:__INTEL_COMPILER=1800 /D:WIN32 /D:NDEBUG /D:_CONSOLE /D:_UNICODE /D:UNICODE /EHs /EHc /MD /GS /Gy /fp:precise /Zc:wchar_t /Zc:forScope /Fox64\Release\ /Fdx64\Release\vc141.pdb /TP /FC /fp:fast /Qopt-report5 /QxHOST /Qopenmp /debug:inline-debug-info

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -Qinline-factor: 100
  -Qinline-min-size: 30
  -Qinline-max-size: 276
  -Qinline-max-total-size: 2000
  -Qinline-max-per-routine: 10000
  -Qinline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.


Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/3=33.3%] C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(36,1)
  -> DELETED: (44,2) sse_add(size_t, const float *, float *) (isz = 29) (sz = 38)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(38,2)
   remark #15388: vectorization support: reference arrayA[i] has aligned access   [ C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(40,3) ]
   remark #15388: vectorization support: reference arrayB[i] has aligned access   [ C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(41,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 3.200 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(36,1):remark #34051: REGISTER ALLOCATION : [main] C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp:36

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    4[ rax rdx rcx zmm0]
        
    Routine temporaries
        Total         :      27
            Global    :      18
            Local     :       9
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       2 [0.00e+000 ~ 0.0%]
            Writes    :       2 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: sse_add(size_t, const float *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (sse_add(size_t, const float *, float *)) [2/3=66.7%] C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(22,1)
  -> EXTERN: (29,3) _mm_mul_ps(__m128, __m128)
  -> EXTERN: (30,3) _mm_add_ps(__m128, __m128)


    Report from: Code generation optimizations [cg]

C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(22,1):remark #34051: REGISTER ALLOCATION : [?sse_add@@YAX_KQEBMPEAM@Z] C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp:22

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   18[ rbx rbp rsi rdi r12-r15 xmm6-xmm15]
        Assigned     :    3[ rdx rcx r8]
        
    Routine temporaries
        Total         :      21
            Global    :       0
            Local     :      21
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: function.._simdsimd3__xmm4nvv(int *, long)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (function.._simdsimd3__xmm4nvv(int *, long)) [3/3=100.0%] C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(54,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]

remark #15347: FUNCTION WAS VECTORIZED with xmm, simdlen=4, unmasked, formal parameter types: (vector,vector) 
remark #15329: vectorization support: indirect store was emulated for the variable <slowDown[_2]>, 64-bit indexed, part of address is private   [ C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(55,2) ]
remark #15305: vectorization support: vector length 4
remark #15463: unmasked indexed (or scatter) stores: 1 
remark #15475: --- begin vector cost summary ---
remark #15482: vectorized math library calls: 1 
remark #15488: --- end vector cost summary ---

LOOP BEGIN at C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(55,2)
   remark #15549: loop was vectorized along with the enclosing function
LOOP END

    Report from: Code generation optimizations [cg]

C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(54,1):remark #34051: REGISTER ALLOCATION : [?function@@YAJQEAHJ@Z._simdsimd3__xmm4nvv] C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp:54

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   15[ rbx rbp r10-r12 r14-r15 xmm8-xmm15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8 zmm0-zmm7]
        
    Routine temporaries
        Total         :      51
            Global    :      22
            Local     :      29
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: function.._simdsimd3__xmm4mvv(int *, long)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (function.._simdsimd3__xmm4mvv(int *, long)) [3/3=100.0%] C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(54,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]

remark #15347: FUNCTION WAS VECTORIZED with xmm, simdlen=4, masked, formal parameter types: (vector,vector) 
remark #15329: vectorization support: indirect store was emulated for the variable <slowDown[_2]>, masked, 64-bit indexed, part of address is private   [ C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(55,2) ]
remark #15305: vectorization support: vector length 4
remark #15459: masked indexed (or scatter) stores: 1 
remark #15475: --- begin vector cost summary ---
remark #15482: vectorized math library calls: 1 
remark #15488: --- end vector cost summary ---

LOOP BEGIN at C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(55,2)
   remark #15549: loop was vectorized along with the enclosing function
LOOP END

    Report from: Code generation optimizations [cg]

C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(54,1):remark #34051: REGISTER ALLOCATION : [?function@@YAJQEAHJ@Z._simdsimd3__xmm4mvv] C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp:54

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   15[ rbx rbp r10-r12 r14-r15 xmm8-xmm15]
        Assigned     :   16[ rax rdx rcx rsi rdi r8 zmm0-zmm7 zmm14-zmm15]
        
    Routine temporaries
        Total         :      62
            Global    :      32
            Local     :      30
        Regenerable   :       3
        Spilled       :       5
        
    Routine stack
        Variables     :      79 bytes*
            Reads     :       1 [1.00e+000 ~ 0.1%]
            Writes    :       2 [2.00e+000 ~ 0.2%]
        Spills        :      64 bytes*
            Reads     :       3 [2.00e+000 ~ 0.2%]
            Writes    :       3 [2.00e+000 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: function(int *, long)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (function(int *, long)) [3/3=100.0%] C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(54,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(55,2)
   remark #15389: vectorization support: reference slowDown[_2] has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.100
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 28.090 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=4
LOOP END

    Report from: Code generation optimizations [cg]

C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp(54,1):remark #34051: REGISTER ALLOCATION : [?function@@YAJQEAHJ@Z] C:\Users\josh\Desktop\git_temp\Parallel_Vision_Research\Windows\Vector_Tutorial_Introduction\Vectorization_Advisor\example.cpp:54

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :    7[ rax rdx rcx r8-r10 zmm0]
        
    Routine temporaries
        Total         :      33
            Global    :      21
            Local     :      12
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+000 ~ 0.0%]
            Writes    :       0 [0.00e+000 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
